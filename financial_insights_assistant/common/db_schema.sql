-- Schema for the Financial Insights Assistant

-- Table to store raw market data obtained from financial MCPs (e.g., mcp-trader)
CREATE TABLE IF NOT EXISTS stock_market_data (
    id SERIAL PRIMARY KEY,
    symbol TEXT NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(), -- Time when this data was recorded in our system
    data_source TEXT,                             -- Identifier for the source tool/MCP (e.g., 'mcp-trader/analyze-stock')
    raw_data JSONB,                               -- Stores the full JSON response from the data source
    -- Optional: Add specific frequently queried fields here if raw_data parsing becomes a bottleneck
    -- For example: open REAL, high REAL, low REAL, close REAL, volume BIGINT
    -- These would need to be extracted from raw_data when inserting.
    UNIQUE (symbol, timestamp, data_source) -- Prevent duplicate entries for the same data point
);

-- Index for faster queries on symbol and timestamp
CREATE INDEX IF NOT EXISTS idx_stock_market_data_symbol_timestamp ON stock_market_data (symbol, timestamp DESC);

-- Table to store predictions made by the Analysis Loop Agent
CREATE TABLE IF NOT EXISTS stock_predictions (
    id SERIAL PRIMARY KEY,
    symbol TEXT NOT NULL,
    prediction_timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(), -- Time when the prediction was generated
    -- prediction_horizon TEXT, -- e.g., '1D', '1H', 'next_close'. For future use if prediction model has horizons.
    prediction_type TEXT, -- e.g., 'mock_trend', 'simple_average_forecast'
    predicted_value TEXT,       -- The predicted value or statement (e.g., 'up', 'down', '150.50')
    -- prediction_confidence REAL, -- Optional confidence score (0.0 to 1.0)
    -- input_data_ids INT[], -- Optional: Array of IDs from stock_market_data used for this prediction
    notes TEXT,                 -- Any textual explanation or context for the prediction
    raw_input_summary JSONB     -- Optional: store a summary of the input data that led to this prediction
);

-- Index for faster queries on predictions
CREATE INDEX IF NOT EXISTS idx_stock_predictions_symbol_timestamp ON stock_predictions (symbol, prediction_timestamp DESC);

-- Optional: Table for analysis agent loop status or logs (if not just using application logs)
-- CREATE TABLE IF NOT EXISTS analysis_agent_log (
--     id SERIAL PRIMARY KEY,
--     timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
--     stock_symbol TEXT,
--     event_type TEXT NOT NULL, -- e.g., 'LOOP_STARTED', 'DATA_FETCHED', 'PREDICTION_MADE', 'ERROR', 'LOOP_STOPPED'
--     message TEXT,
--     details JSONB
-- );
-- CREATE INDEX IF NOT EXISTS idx_analysis_agent_log_timestamp ON analysis_agent_log (timestamp DESC);

-- Add more tables or refine existing ones as the project evolves.
-- For example, a table for user portfolio holdings if that feature is added.

COMMENT ON TABLE stock_market_data IS 'Stores raw time-series market data and analyses obtained from financial MCPs.';
COMMENT ON COLUMN stock_market_data.raw_data IS 'Flexible JSONB field to store the entire payload from the financial data source tool.';

COMMENT ON TABLE stock_predictions IS 'Stores predictions generated by the Analysis Loop Agent.';
COMMENT ON COLUMN stock_predictions.predicted_value IS 'The actual prediction, could be a numerical value, a trend direction, etc.';

-- Table to store virtual funds for users
CREATE TABLE IF NOT EXISTS user_virtual_funds (
    user_id TEXT PRIMARY KEY,
    balance DECIMAL(10, 2) NOT NULL DEFAULT 1000.00 -- Default balance for new users
);

-- Table to store the catalog of virtual items
CREATE TABLE IF NOT EXISTS virtual_item_catalog (
    item_id SERIAL PRIMARY KEY,
    item_name TEXT NOT NULL UNIQUE,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL
);

-- Optional: Populate virtual_item_catalog with some initial items
-- This can also be done via the application logic if preferred,
-- but adding here ensures they exist when the DB is initialized.
INSERT INTO virtual_item_catalog (item_name, description, price) VALUES
    ('Virtual Self-Help Book', 'A book to unlock your virtual potential.', 10.00)
    ON CONFLICT (item_name) DO NOTHING;

INSERT INTO virtual_item_catalog (item_name, description, price) VALUES
    ('Virtual Adventure Game', 'Embark on a thrilling digital quest.', 25.50)
    ON CONFLICT (item_name) DO NOTHING;

INSERT INTO virtual_item_catalog (item_name, description, price) VALUES
    ('Virtual Gourmet Coffee Beans', 'Premium beans for the discerning virtual palate.', 15.75)
    ON CONFLICT (item_name) DO NOTHING;

INSERT INTO virtual_item_catalog (item_name, description, price) VALUES
    ('Virtual Desk Plant', 'Adds a touch of green to your virtual workspace.', 5.25)
    ON CONFLICT (item_name) DO NOTHING;

-- Grant permissions if necessary (depends on existing setup, often handled by user roles)
-- For example, if there's a specific application user:
-- GRANT SELECT, INSERT, UPDATE, DELETE ON user_virtual_funds TO my_app_user;
-- GRANT SELECT ON virtual_item_catalog TO my_app_user;
-- (Assuming the default public schema grants are sufficient for now or handled at a higher level)
